CODE RESTRUCTURING
------------------
1. Get code compiling, run existing OAuth Proxy tests and check in
   Verify the change to an async before handler in middleware is OK

2. Get base lambda right
   HTTP error to consolidate with OAuth requests, for API forwarding
   Rename JSON Router to OAuthProxy

3. Use base64url instead of JWT library for decoding

4. Rename utilities folder to http

TEST CONSOLIDATION
------------------
1. Port tests from token handler api
   Ensure that access-control-request-headers is handled correctly

2. Ensure that custom headers are sent through correctly
   But drop cookie headers or problematic request headers

END-TO-END
----------
1. Verify that full SPA works

LOCAL API
---------
1. Serverless API feature branch that no longer deal with cookies, CORS or CSRF
   Update tests to represent traffic from the token handler to the API
   They must only use access tokens, as for a mobile client, and 'npm run setup' will change
   Build a package and a custom packager may be needed to get the right config
   Do not deploy, since it will break the live system

2. Local token handler repo branch

3. New Express token handler repo

4. Cloud native updates on a branch

DEPLOYED ENVIRONMENT
--------------------
1. Update existing resources to use new certs, then delete the old one once working

2. Deploy and verify the new token handler
   
3. Elasticsearch logs - all OAuth Agent requests and only internal errors for OAuth Proxy

MISCELLANEOUS
-------------
1. Codacy support

2. ResponseWriter.objectResponse changes to Serverless API, to prevent cryptic 502 response errors

3. DOC: My requirements are to route and also run a lambda, whereas AWS Proxy Integration does not support this
