CODE AND TEST COMPLETION
------------------------
0. Minor consolidation
   Assert JSON result in test number 7
   See how much proxy-agent adds to build size and use a dynamic import if worth reducing the size
   
1. Fix 502 error with HTTP test 7 - no AT cookie found - needs logging
   Seems to occur whenever headers are set
   Debug out the response payload, which may be malformed, since this is a common cause of 502 errors
   
2. Forward custom headers from the client and verify they are sent
   Try to do this generically
   https://www.w3.org/TR/ct-guidelines/#sec-ProxyReqest
   https://stackoverflow.com/questions/20820572/under-what-conditions-are-http-request-headers-removed-by-proxies

   Add X-Forwarded-For and Via request headers
   RFC2616 modifications - leave other headers alone
   Remove crappy AWS headers

   https://gist.github.com/andris9/8093905
   request.headers.host = origin;
   request.headers['x-forwarded-for'] = request.headers['x-forwarded-for'] || request.connection.remoteAddress;

3. Add better OPTIONS tests from token handler api
   Ensure that access-control-request-headers is handled correctly
   Take care to only test reverse proxy responsibilities

4. Deal with routing to the OAuth Agent
   This will require forwarding cookies / multivalueheaders and returning them in responses
   Update npm run setup to call https://api.authsamples.com/oauth-agent

LOCAL INTEGRATION
-----------------
1. Reduce and deploy a new oauth-agent API on a feature branch of tokenhandlerapi
   Update tests to represent traffic from the reverse proxy to the OAuth Agent
   A custom packager may be needed to deploy the correct config
   They must no longer deal with CORS but to still do CSRF and cookie handling
   Also update README naming, ready for merging

2. Serverless API feature branch that no longer deal with cookies, CORS or CSRF
   Update tests to represent traffic from the reverse proxy to the API
   They must only use access tokens, as for a mobile client, and 'npm run setup' will change
   Build a package and a custom packager may be needed to get the right config
   Do not deploy, since it will break the deployed system

3. SPA repointed on a branch and working on my local PC
   Do not deploy, since it will break the deployed system

CLOUD INTEGRATION
-----------------
1. Request a new AWS cert that includes tokenhandler domain
   Then see if I can swap certs for existing resources

2. Run 'npm run package && npm run deploy' for reverse proxy to https://tokenhandler.authsamples.com
   Ensure the correct configuration
   
3. Deploy oauth-agent, serverless-api and spa
   Delete tokenhandlerapi

4. Elasticsearch logs for reverse proxy errors

OTHER
-----
1. Codacy support for OAuth Agent and Reverse Proxy

2. DOC: My requirements are to route and also run a lambda, whereas AWS Proxy Integration does not support this