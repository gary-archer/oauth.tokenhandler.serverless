service: tokenhandler

# Base details for AWS deployment
provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-2
  profile: default
  stage: ${self:custom.config.settings.stage}
  apiGateway:
    shouldStartNameWithService: true

custom:
  # Load the environment specific YAML configuration into this shared configuration
  config: ${file(environments/${opt:stage, 'local'}.yml)}
  
  # API gateway domain details
  customDomain:
    domainName: ${self:custom.config.settings.domainName}
    certificateName: '*.${self:custom.config.settings.certificateDomainName}'
    stage: ${self:custom.config.settings.stage}
    endpointType: regional

  # Scripts used when building the AWS deployment package
  scripts:
    hooks:
      'before:package:createDeploymentArtifacts': STAGE=${opt:stage, 'local'} npm run packageConfig
      'after:package:createDeploymentArtifacts':  STAGE=${opt:stage, 'local'} npm run restoreConfig

# A single HTTP endpoint covers all routes, with other logic handled in code
functions:
  wildcard:
    handler: dist/lambda/wildcard.handler
    events:
      - http: 
          path: /{proxy+}
          method: ANY

# Include the correct config file for the stage, and exclude unwanted files
package:
  patterns:
  - '!.codacy.yaml'
  - '!.eslintrc.js'
  - '!.vscode/**'
  - '!environments/**'
  - '!src/**'
  - '!test/**'
  - '!ts*.json'
  - '!package*.json'
  - '!README.md'
  - '!LICENSE.txt'
  
plugins:
  - serverless-plugin-scripts
  - serverless-domain-manager

resources:
  Resources:

    # Limit cloudwatch log retention 
    WildcardLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: '5'
